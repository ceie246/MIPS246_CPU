Release 13.3 - xst O.76xd (nt)
Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.10 secs
 
--> Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.10 secs
 
--> Reading design: top_cpu.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Parsing
  3) HDL Elaboration
  4) HDL Synthesis
       4.1) HDL Synthesis Report
  5) Advanced HDL Synthesis
       5.1) Advanced HDL Synthesis Report
  6) Low Level Synthesis
  7) Partition Report
  8) Design Summary
       8.1) Primitive and Black Box Usage
       8.2) Device utilization summary
       8.3) Partition Resource Summary
       8.4) Timing Report
            8.4.1) Clock Information
            8.4.2) Asynchronous Control Signals Information
            8.4.3) Timing Summary
            8.4.4) Timing Details
            8.4.5) Cross Clock Domains Report


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "top_cpu.prj"
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "top_cpu"
Output Format                      : NGC
Target Device                      : xc6slx16-3-csg324

---- Source Options
Top Module Name                    : top_cpu
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Shift Register Extraction          : YES
ROM Style                          : Auto
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Shift Register Minimum Size        : 2
Use DSP Block                      : Auto
Automatic Register Balancing       : No

---- Target Options
LUT Combining                      : Auto
Reduce Control Sets                : Auto
Add IO Buffers                     : YES
Global Maximum Fanout              : 100000
Add Generic Clock Buffer(BUFG)     : 16
Register Duplication               : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Auto
Use Synchronous Set                : Auto
Use Synchronous Reset              : Auto
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Power Reduction                    : NO
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
DSP48 Utilization Ratio            : 100
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Parsing                                  *
=========================================================================
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\wram2asciiram_addr.v" into library work
Parsing verilog file "define.v" included at line 2.
Parsing module <wram2asciiram_addr>.
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\vga.v" into library work
Parsing module <vga>.
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\ram.v" into library work
Parsing module <ram>.
INFO:HDLCompiler:693 - "E:\GitHub\MIPS246_CPU\vga_cpu\ram.v" Line 37. parameter declaration becomes local in ram with formal parameter declaration list
INFO:HDLCompiler:693 - "E:\GitHub\MIPS246_CPU\vga_cpu\ram.v" Line 38. parameter declaration becomes local in ram with formal parameter declaration list
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\mux2x32.v" into library work
Parsing module <mux2x32>.
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\ascii2font.v" into library work
Parsing verilog file "define.v" included at line 2.
Parsing module <ascii2font>.
Parsing verilog file "global_parameter.v" included at line 88.
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\vga_controller.v" into library work
Parsing verilog file "define.v" included at line 2.
Parsing module <vga_controller>.
Analyzing Verilog file "E:\GitHub\MIPS246_CPU\vga_cpu\top_cpu.v" into library work
Parsing module <top_cpu>.

=========================================================================
*                            HDL Elaboration                            *
=========================================================================

Elaborating module <top_cpu>.

Elaborating module <vga_controller>.

Elaborating module <wram2asciiram_addr>.
WARNING:HDLCompiler:413 - "E:\GitHub\MIPS246_CPU\vga_cpu\wram2asciiram_addr.v" Line 31: Result of 25-bit expression is truncated to fit in 5-bit target.

Elaborating module <mux2x32(WIDTH=12)>.

Elaborating module <ram(WIDTH=8,DEPTH=12,INIT=1)>.

Elaborating module <ascii2font>.

Elaborating module <vga>.

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Synthesizing Unit <top_cpu>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/top_cpu.v".
    Summary:
	no macro.
Unit <top_cpu> synthesized.

Synthesizing Unit <vga_controller>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/vga_controller.v".
    Summary:
	no macro.
Unit <vga_controller> synthesized.

Synthesizing Unit <wram2asciiram_addr>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/wram2asciiram_addr.v".
    Summary:
	no macro.
Unit <wram2asciiram_addr> synthesized.

Synthesizing Unit <mux2x32>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/mux2x32.v".
        WIDTH = 12
    Summary:
	no macro.
Unit <mux2x32> synthesized.

Synthesizing Unit <ram>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/ram.v".
        WIDTH = 8
        DEPTH = 12
        INIT = 1
    Found 4096x8-bit single-port RAM <Mram_ram> for signal <ram>.
    Summary:
	inferred   1 RAM(s).
Unit <ram> synthesized.

Synthesizing Unit <ascii2font>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/ascii2font.v".
        char_1 = 512'b
        char_2 = 512'b
        char_3 = 512'b
        char_4 = 512'b
        char_5 = 512'b
        char_6 = 512'b
        char_7 = 512'b
        char_8 = 512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000000110000110000000110000001100000110000000011000011000000001100001100000000110000111000000011000001110000011000000011100001000000000111111000000000110111100000000110000111000000110000001110000110000000011100011000000000110001100000000011000110000000001100011000000000110000110000000110000001100000110000000001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        char_9 = 512'b
        char_0 = 512'b
        char_a = 512'b
        char_b = 512'b
        char_c = 512'b
        char_d = 512'b
        char_e = 512'b
        char_f = 512'b
        char_g = 512'b
        char_h = 512'b
        char_i = 512'b
        char_j = 512'b
        char_k = 512'b
        char_l = 512'b
        char_m = 512'b
        char_n = 512'b
        char_o = 512'b
        char_p = 512'b
        char_q = 512'b
        char_r = 512'b
        char_s = 512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100100000011000001110000011000000011000001100000000100000110000000000000001110000000000000011111000000000000011111000000000000001110000010000000001100001000000000110000110000000011000011100000011000001101111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        char_t = 512'b
        char_u = 512'b
        char_v = 512'b
        char_w = 512'b
        char_x = 512'b
        char_y = 512'b
        char_z = 512'b
        ascii_1 = 8'b00110001
        ascii_2 = 8'b00110010
        ascii_3 = 8'b00110011
        ascii_4 = 8'b00110100
        ascii_5 = 8'b00110101
        ascii_6 = 8'b00110110
        ascii_7 = 8'b00110111
        ascii_8 = 8'b00111000
        ascii_9 = 8'b00111001
        ascii_0 = 8'b00110000
        ascii_a = 8'b01100001
        ascii_b = 8'b01100010
        ascii_c = 8'b01100011
        ascii_d = 8'b01100100
        ascii_e = 8'b01100101
        ascii_f = 8'b01100110
        ascii_g = 8'b01100111
        ascii_h = 8'b01101000
        ascii_i = 8'b01101001
        ascii_j = 8'b01101010
        ascii_k = 8'b01101011
        ascii_l = 8'b01101100
        ascii_m = 8'b01101101
        ascii_n = 8'b01101110
        ascii_o = 8'b01101111
        ascii_p = 8'b01110000
        ascii_q = 8'b01110001
        ascii_r = 8'b01110010
        ascii_s = 8'b01110011
        ascii_t = 8'b01110100
        ascii_u = 8'b01110101
        ascii_v = 8'b01110110
        ascii_w = 8'b01110111
        ascii_x = 8'b01111000
        ascii_y = 8'b01111001
        ascii_z = 8'b01111010
        ascii_wave = 8'b01100000
        ascii_sub = 8'b00101101
        ascii_add = 8'b00111101
        ascii_left_bracket = 8'b01011011
        ascii_right_bracket = 8'b01011101
        ascii_or = 8'b01011100
        ascii_colon = 8'b00111011
        ascii_quotes = 8'b00100111
        ascii_comma = 8'b00101100
        ascii_dot = 8'b00101110
        ascii_div = 8'b00101111
        ascii_shift_1 = 8'b00100001
        ascii_shift_2 = 8'b01000000
        ascii_shift_3 = 8'b00100011
        ascii_shift_4 = 8'b00100100
        ascii_shift_5 = 8'b00100101
        ascii_shift_6 = 8'b01011110
        ascii_shift_7 = 8'b00100110
        ascii_shift_8 = 8'b00101010
        ascii_shift_9 = 8'b00101000
        ascii_shift_0 = 8'b00101001
        ascii_shift_wave = 8'b01111110
        ascii_shift_sub = 8'b01011111
        ascii_shift_add = 8'b00101011
        ascii_shift_left_bracket = 8'b01111011
        ascii_shift_right_bracket = 8'b01111101
        ascii_shift_or = 8'b01111100
        ascii_shift_colon = 8'b00111010
        ascii_shift_quotes = 8'b00100010
        ascii_shift_comma = 8'b00111100
        ascii_shift_dot = 8'b00111110
        ascii_shift_div = 8'b00111111
        kb_1 = 8'b00010110
        kb_2 = 8'b00011110
        kb_3 = 8'b00100110
        kb_4 = 8'b00100101
        kb_5 = 8'b00101110
        kb_6 = 8'b00110110
        kb_7 = 8'b00111101
        kb_8 = 8'b00111110
        kb_9 = 8'b01000110
        kb_0 = 8'b01000101
        kb_a = 8'b00011100
        kb_b = 8'b00110010
        kb_c = 8'b00100001
        kb_d = 8'b00100011
        kb_e = 8'b00100100
        kb_f = 8'b00101011
        kb_g = 8'b00110100
        kb_h = 8'b00110011
        kb_i = 8'b01000011
        kb_j = 8'b00111011
        kb_k = 8'b01000010
        kb_l = 8'b01001011
        kb_m = 8'b00111010
        kb_n = 8'b00110001
        kb_o = 8'b01000100
        kb_p = 8'b01001101
        kb_q = 8'b00010101
        kb_r = 8'b00101101
        kb_s = 8'b00011011
        kb_t = 8'b00101100
        kb_u = 8'b00111100
        kb_v = 8'b00101010
        kb_w = 8'b00011101
        kb_x = 8'b00100010
        kb_y = 8'b00110101
        kb_z = 8'b00011010
        kb_wave = 8'b00001110
        kb_sub = 8'b01001110
        kb_add = 8'b01010101
        kb_left_bracket = 8'b01010100
        kb_right_bracket = 8'b01011011
        kb_or = 8'b01011101
        kb_colon = 8'b01001100
        kb_quotes = 8'b01010010
        kb_comma = 8'b01000001
        kb_dot = 8'b01001001
        kb_div = 8'b01001010
        kb_ESC = 8'b01110110
        kb_F1 = 8'b00000101
        kb_F2 = 8'b00000110
        kb_F3 = 8'b00000100
        kb_F4 = 8'b00001100
        kb_F5 = 8'b00000011
        kb_F6 = 8'b00001011
        kb_F7 = 8'b10000011
        kb_F8 = 8'b00001010
        kb_F9 = 8'b00000001
        kb_F10 = 8'b00001001
        kb_F11 = 8'b01111000
        kb_F12 = 8'b00000111
        kb_TAB = 8'b00001101
        kb_CAPS = 8'b01011000
        kb_SHIFT_LEFT = 8'b00010010
        kb_SHIFT_RIGHT = 8'b01011001
        kb_CTRL = 8'b00010100
        kb_ALT = 8'b00010001
        kb_SPACE = 8'b00101001
        kb_ENTER = 8'b01011010
        kb_BACK = 8'b01100110
        kb_UP = 8'b01110101
        kb_DOWN = 8'b01110010
        kb_LEFT = 8'b01101011
        kb_RIGHT = 8'b01110100
    Found 10-bit subtractor for signal <GND_6_o_GND_6_o_sub_42_OUT> created at line 143.
    Found 9-bit subtractor for signal <addr<8:0>> created at line 142.
    Found 1-bit 512-to-1 multiplexer for signal <data_out<7>> created at line 144.
    Summary:
	inferred   2 Adder/Subtractor(s).
	inferred   1 Multiplexer(s).
Unit <ascii2font> synthesized.

Synthesizing Unit <vga>.
    Related source file is "e:/github/mips246_cpu/vga_cpu/vga.v".
    Found 11-bit register for signal <v_count>.
    Found 11-bit register for signal <h_count>.
    Found 8-bit register for signal <data_reg>.
    Found 1-bit register for signal <video_out>.
    Found 11-bit subtractor for signal <col> created at line 82.
    Found 11-bit adder for signal <h_count[10]_GND_7_o_add_1_OUT> created at line 43.
    Found 11-bit adder for signal <v_count[10]_GND_7_o_add_6_OUT> created at line 56.
    Found 10-bit subtractor for signal <row<9:0>> created at line 78.
    Found 11-bit comparator lessequal for signal <n0011> created at line 80
    Found 11-bit comparator greater for signal <h_count[10]_PWR_9_o_LessThan_13_o> created at line 80
    Found 11-bit comparator lessequal for signal <n0015> created at line 81
    Found 11-bit comparator greater for signal <v_count[10]_PWR_9_o_LessThan_15_o> created at line 81
    Found 11-bit comparator greater for signal <hs> created at line 85
    Found 11-bit comparator greater for signal <vs> created at line 86
    Summary:
	inferred   4 Adder/Subtractor(s).
	inferred  31 D-type flip-flop(s).
	inferred   6 Comparator(s).
	inferred   5 Multiplexer(s).
Unit <vga> synthesized.

=========================================================================
HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 1
 4096x8-bit single-port RAM                            : 1
# Adders/Subtractors                                   : 6
 10-bit subtractor                                     : 2
 11-bit adder                                          : 2
 11-bit subtractor                                     : 1
 9-bit subtractor                                      : 1
# Registers                                            : 4
 1-bit register                                        : 1
 11-bit register                                       : 2
 8-bit register                                        : 1
# Comparators                                          : 6
 11-bit comparator greater                             : 4
 11-bit comparator lessequal                           : 2
# Multiplexers                                         : 6
 1-bit 512-to-1 multiplexer                            : 1
 11-bit 2-to-1 multiplexer                             : 2
 2-bit 2-to-1 multiplexer                              : 1
 3-bit 2-to-1 multiplexer                              : 2

=========================================================================

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

WARNING:Xst:1290 - Hierarchical block <real_addr> is unconnected in block <vgacu>.
   It will be removed from the design.

Synthesizing (advanced) Unit <ram>.
INFO:Xst:3218 - HDL ADVISOR - The RAM <Mram_ram> will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
    -----------------------------------------------------------------------
    | ram_type           | Distributed                         |          |
    -----------------------------------------------------------------------
    | Port A                                                              |
    |     aspect ratio   | 4096-word x 8-bit                   |          |
    |     clkA           | connected to signal <clk>           | rise     |
    |     weA            | connected to signal <GND>           | high     |
    |     addrA          | connected to signal <addr>          |          |
    |     diA            | connected to signal <"00011111">    |          |
    |     doA            | connected to internal node          |          |
    -----------------------------------------------------------------------
Unit <ram> synthesized (advanced).

Synthesizing (advanced) Unit <vga>.
The following registers are absorbed into counter <h_count>: 1 register on signal <h_count>.
The following registers are absorbed into counter <v_count>: 1 register on signal <v_count>.
Unit <vga> synthesized (advanced).

=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 1
 4096x8-bit single-port distributed RAM                : 1
# Adders/Subtractors                                   : 4
 10-bit subtractor                                     : 1
 11-bit subtractor                                     : 1
 9-bit subtractor                                      : 2
# Counters                                             : 2
 11-bit up counter                                     : 2
# Registers                                            : 9
 Flip-Flops                                            : 9
# Comparators                                          : 6
 11-bit comparator greater                             : 4
 11-bit comparator lessequal                           : 2
# Multiplexers                                         : 4
 1-bit 512-to-1 multiplexer                            : 1
 2-bit 2-to-1 multiplexer                              : 1
 3-bit 2-to-1 multiplexer                              : 2

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================
INFO:Xst:2261 - The FF/Latch <vga/data_reg_0> in Unit <vga_controller> is equivalent to the following 7 FFs/Latches, which will be removed : <vga/data_reg_1> <vga/data_reg_2> <vga/data_reg_3> <vga/data_reg_4> <vga/data_reg_5> <vga/data_reg_6> <vga/data_reg_7> 

Optimizing unit <top_cpu> ...

Optimizing unit <vga_controller> ...
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram127> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram126> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram125> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram124> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram123> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram122> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram120> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram119> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram121> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram118> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram117> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram116> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram115> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram114> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram113> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram111> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram110> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram112> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram109> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram108> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram106> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram105> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram107> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram104> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram103> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram101> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram100> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram102> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram99> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram98> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram97> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram96> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram95> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram94> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram92> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram91> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram93> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram90> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram89> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram87> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram86> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram88> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram85> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram84> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram82> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram128>, <vgacu/ascii_ram/Mram_ram83> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram79> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram78> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram77> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram76> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram75> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram73> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram72> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram74> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram71> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram70> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram68> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram67> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram69> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram66> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram63> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram62> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram64> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram61> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram60> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram59> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram58> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram57> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram56> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram54> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram53> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram55> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram52> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram51> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram49> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram48> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram50> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram47> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram46> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram44> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram43> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram45> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram42> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram41> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram40> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram39> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram38> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram37> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram35> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram34> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram36> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram33> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram32> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram30> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram29> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram31> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram28> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram27> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram25> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram24> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram26> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram23> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram22> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram21> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram20> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram19> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram18> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram16> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram15> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram17> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram14> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram13> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram11> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram10> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram12> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram9> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram8> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram6> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram5> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram7> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram4> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram3> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram80>, <vgacu/ascii_ram/Mram_ram2> are equivalent, second RAM is removed
INFO:Xst:2399 - RAMs <vgacu/ascii_ram/Mram_ram65>, <vgacu/ascii_ram/Mram_ram1> are equivalent, second RAM is removed

Mapping all equations...
Building and optimizing final netlist ...
Found area constraint ratio of 100 (+ 5) on block top_cpu, actual ratio is 8.

Final Macro Processing ...

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 24
 Flip-Flops                                            : 24

=========================================================================

=========================================================================
*                           Partition Report                            *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Design Summary                             *
=========================================================================

Top Level Output File Name         : top_cpu.ngc

Primitive and Black Box Usage:
------------------------------
# BELS                             : 422
#      GND                         : 1
#      LUT1                        : 21
#      LUT2                        : 18
#      LUT3                        : 55
#      LUT4                        : 29
#      LUT5                        : 41
#      LUT6                        : 195
#      MUXCY                       : 20
#      MUXF7                       : 13
#      MUXF8                       : 6
#      VCC                         : 1
#      XORCY                       : 22
# FlipFlops/Latches                : 24
#      FDC                         : 13
#      FDCE                        : 11
# RAMS                             : 4
#      RAM256X1S                   : 4
# Clock Buffers                    : 1
#      BUFGP                       : 1
# IO Buffers                       : 11
#      IBUF                        : 1
#      OBUF                        : 10

Device utilization summary:
---------------------------

Selected Device : 6slx16csg324-3 


Slice Logic Utilization: 
 Number of Slice Registers:              24  out of  18224     0%  
 Number of Slice LUTs:                  375  out of   9112     4%  
    Number used as Logic:               359  out of   9112     3%  
    Number used as Memory:               16  out of   2176     0%  
       Number used as RAM:               16

Slice Logic Distribution: 
 Number of LUT Flip Flop pairs used:    375
   Number with an unused Flip Flop:     351  out of    375    93%  
   Number with an unused LUT:             0  out of    375     0%  
   Number of fully used LUT-FF pairs:    24  out of    375     6%  
   Number of unique control sets:         2

IO Utilization: 
 Number of IOs:                          12
 Number of bonded IOBs:                  12  out of    232     5%  

Specific Feature Utilization:
 Number of BUFG/BUFGCTRLs:                1  out of     16     6%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
Timing Report

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------+-------+
Clock Signal                       | Clock buffer(FF name)  | Load  |
-----------------------------------+------------------------+-------+
clk                                | BUFGP                  | 28    |
-----------------------------------+------------------------+-------+

Asynchronous Control Signals Information:
----------------------------------------
No asynchronous control signals found in this design

Timing Summary:
---------------
Speed Grade: -3

   Minimum period: 10.630ns (Maximum Frequency: 94.074MHz)
   Minimum input arrival time before clock: 2.824ns
   Maximum output required time after clock: 6.137ns
   Maximum combinational path delay: No path found

Timing Details:
---------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'clk'
  Clock period: 10.630ns (frequency: 94.074MHz)
  Total number of paths / destination ports: 39150 / 67
-------------------------------------------------------------------------
Delay:               10.630ns (Levels of Logic = 9)
  Source:            vgacu/vga/v_count_3 (FF)
  Destination:       vgacu/vga/data_reg_0 (FF)
  Source Clock:      clk rising
  Destination Clock: clk rising

  Data Path: vgacu/vga/v_count_3 to vgacu/vga/data_reg_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDCE:C->Q            13   0.447   0.933  vgacu/vga/v_count_3 (vgacu/vga/v_count_3)
     LUT2:I1->O            5   0.205   0.715  vgacu/vga/Msub_row<9:0>_cy<4>11 (vgacu/vga/Msub_row<9:0>_cy<4>)
     LUT6:I5->O            6   0.205   0.744  vgacu/vga/Msub_row<9:0>_xor<9>11 (vgacu/vga_addr<20>)
     MUXF8:S->O           48   0.202   1.864  vgacu/inst_LPM_MUX3_2_f8 (vgacu/ram_ascii<3>)
     LUT5:I0->O           25   0.203   1.193  vgacu/font/char[7]_GND_6_o_equal_11_o<7>112 (vgacu/font/char[7]_GND_6_o_equal_11_o<7>1)
     LUT3:I2->O            1   0.205   0.580  vgacu/font/Mmux_data_out<7>61169 (vgacu/font/Mmux_data_out<7>61168)
     LUT6:I5->O            1   0.205   0.808  vgacu/font/Mmux_data_out<7>61171 (vgacu/font/Mmux_data_out<7>61170)
     LUT6:I3->O            1   0.205   0.580  vgacu/font/Mmux_data_out<7>61184_SW0_SW0 (N69)
     LUT6:I5->O            1   0.205   0.827  vgacu/font/Mmux_data_out<7>61185 (vgacu/font/Mmux_data_out<7>61184)
     LUT6:I2->O            1   0.203   0.000  vgacu/font/Mmux_data_out<7>61374 (vgacu/ram_font<0>)
     FDC:D                     0.102          vgacu/vga/data_reg_0
    ----------------------------------------
    Total                     10.630ns (2.387ns logic, 8.243ns route)
                                       (22.5% logic, 77.5% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'clk'
  Total number of paths / destination ports: 24 / 24
-------------------------------------------------------------------------
Offset:              2.824ns (Levels of Logic = 1)
  Source:            rst (PAD)
  Destination:       vgacu/vga/v_count_10 (FF)
  Destination Clock: clk rising

  Data Path: rst to vgacu/vga/v_count_10
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O            24   1.222   1.172  rst_IBUF (rst_IBUF)
     FDC:CLR                   0.430          vgacu/vga/video_out
    ----------------------------------------
    Total                      2.824ns (1.652ns logic, 1.172ns route)
                                       (58.5% logic, 41.5% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'clk'
  Total number of paths / destination ports: 34 / 10
-------------------------------------------------------------------------
Offset:              6.137ns (Levels of Logic = 3)
  Source:            vgacu/vga/v_count_2 (FF)
  Destination:       vs (PAD)
  Source Clock:      clk rising

  Data Path: vgacu/vga/v_count_2 to vs
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDCE:C->Q            10   0.447   1.221  vgacu/vga/v_count_2 (vgacu/vga/v_count_2)
     LUT6:I0->O            4   0.203   0.912  vgacu/vga/v_count[10]_PWR_9_o_equal_6_o<10>21 (vgacu/vga/v_count[10]_PWR_9_o_equal_6_o<10>2)
     LUT6:I3->O            1   0.205   0.579  vgacu/vs11 (vs_OBUF)
     OBUF:I->O                 2.571          vs_OBUF (vs)
    ----------------------------------------
    Total                      6.137ns (3.426ns logic, 2.711ns route)
                                       (55.8% logic, 44.2% route)

=========================================================================

Cross Clock Domains Report:
--------------------------

Clock to Setup on destination clock clk
---------------+---------+---------+---------+---------+
               | Src:Rise| Src:Fall| Src:Rise| Src:Fall|
Source Clock   |Dest:Rise|Dest:Rise|Dest:Fall|Dest:Fall|
---------------+---------+---------+---------+---------+
clk            |   10.630|         |         |         |
---------------+---------+---------+---------+---------+

=========================================================================


Total REAL time to Xst completion: 17.00 secs
Total CPU time to Xst completion: 16.26 secs
 
--> 

Total memory usage is 200068 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :    2 (   0 filtered)
Number of infos    :  126 (   0 filtered)

